package com.ekocaman.euler

import scala.collection.immutable.IndexedSeq

/**
Highly divisible triangular number

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
 */

object Euler12 extends App {
    def primeFactors(number: Int): IndexedSeq[Int] = {
        val result = for(n <- 2 to number/2 if number % n == 0)
            yield n

        result :+ number
    }

    def factorCount(num: Int): Long = {
        primeFactors(num).size + 1
    }

    val triangleNumbers: Stream[Int] = 0 #:: triangleNumbers.zipWithIndex.map(p => p._1 + p._2 + 1)

    println(triangleNumbers.find(factorCount(_) > 500).get)
}
